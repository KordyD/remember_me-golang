// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/kordyd/remember_me-golang/services/sso/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// MockUserStorage is an autogenerated mock type for the UserStorage type
type MockUserStorage struct {
	mock.Mock
}

type MockUserStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserStorage) EXPECT() *MockUserStorage_Expecter {
	return &MockUserStorage_Expecter{mock: &_m.Mock}
}

// GetUser provides a mock function with given fields: ctx, email
func (_m *MockUserStorage) GetUser(ctx context.Context, email string) (models.User, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (models.User, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) models.User); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserStorage_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type MockUserStorage_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *MockUserStorage_Expecter) GetUser(ctx interface{}, email interface{}) *MockUserStorage_GetUser_Call {
	return &MockUserStorage_GetUser_Call{Call: _e.mock.On("GetUser", ctx, email)}
}

func (_c *MockUserStorage_GetUser_Call) Run(run func(ctx context.Context, email string)) *MockUserStorage_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUserStorage_GetUser_Call) Return(_a0 models.User, _a1 error) *MockUserStorage_GetUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserStorage_GetUser_Call) RunAndReturn(run func(context.Context, string) (models.User, error)) *MockUserStorage_GetUser_Call {
	_c.Call.Return(run)
	return _c
}

// SaveUser provides a mock function with given fields: ctx, email, passHash
func (_m *MockUserStorage) SaveUser(ctx context.Context, email string, passHash []byte) (string, error) {
	ret := _m.Called(ctx, email, passHash)

	if len(ret) == 0 {
		panic("no return value specified for SaveUser")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte) (string, error)); ok {
		return rf(ctx, email, passHash)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte) string); ok {
		r0 = rf(ctx, email, passHash)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []byte) error); ok {
		r1 = rf(ctx, email, passHash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserStorage_SaveUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveUser'
type MockUserStorage_SaveUser_Call struct {
	*mock.Call
}

// SaveUser is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
//   - passHash []byte
func (_e *MockUserStorage_Expecter) SaveUser(ctx interface{}, email interface{}, passHash interface{}) *MockUserStorage_SaveUser_Call {
	return &MockUserStorage_SaveUser_Call{Call: _e.mock.On("SaveUser", ctx, email, passHash)}
}

func (_c *MockUserStorage_SaveUser_Call) Run(run func(ctx context.Context, email string, passHash []byte)) *MockUserStorage_SaveUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]byte))
	})
	return _c
}

func (_c *MockUserStorage_SaveUser_Call) Return(_a0 string, _a1 error) *MockUserStorage_SaveUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserStorage_SaveUser_Call) RunAndReturn(run func(context.Context, string, []byte) (string, error)) *MockUserStorage_SaveUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserStorage creates a new instance of MockUserStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserStorage {
	mock := &MockUserStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
